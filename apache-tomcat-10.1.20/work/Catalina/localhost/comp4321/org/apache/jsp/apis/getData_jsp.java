/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.20
 * Generated at: 2024-05-10 16:20:14 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.apis;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import jdbm.RecordManager;
import jdbm.RecordManagerFactory;
import jdbm.htree.HTree;
import jdbm.helper.FastIterator;
import java.io.*;
import java.util.*;
import IRUtilities.*;
import PROJECT.*;
import java.io.Serializable;
import java.util.Vector;

public final class getData_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

 
    boolean isPhraseSearch(String input) {
        return input.contains("\"");
    }

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(7);
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("PROJECT");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("IRUtilities");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(6);
    _jspx_imports_classes.add("java.util.Vector");
    _jspx_imports_classes.add("jdbm.RecordManager");
    _jspx_imports_classes.add("jdbm.RecordManagerFactory");
    _jspx_imports_classes.add("jdbm.helper.FastIterator");
    _jspx_imports_classes.add("jdbm.htree.HTree");
    _jspx_imports_classes.add("java.io.Serializable");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("application/json; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("    \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

    if (isPhraseSearch(request.getParameter("input"))) {
        out.print("Phrase Search initiated");
    }

    String input = request.getParameter("input").trim();
    
    // case to handle null or empty input
    if (input == null || input.isEmpty()) {
        // add the JSON output for empty input (sortedPages and pages)
        out.print("{\"sortedPages\":[],\"pages\":{}}");
        return;
    }

    //Here is the part used for StopStem
    String stopWord = getServletContext().getRealPath("/WEB-INF/stopwords.txt");
    HashSet<String> stopWords = new HashSet<String>();
    Porter porter = new Porter();
    BufferedReader in = new BufferedReader(new FileReader(stopWord));
    String line;
    while ((line = in.readLine()) != null) {
        stopWords.add(line);
    }
    in.close();

    // Extract n-grams from the list of words
    List<String> words = Arrays.asList(input.split("\\s+"));
    List<String> one_gram = new ArrayList<String>();
    List<String> two_gram = new ArrayList<String>();
    List<String> three_gram = new ArrayList<String>();

    for (int i=0; i < words.size(); i++) {
        String ngram = "";
        // 1-gram
        for (int j=0; j<1; j++) {
            String word = words.get(i+j).toLowerCase();
            if (stopWords.contains(word)) {
                ngram = "";
                break;
            }
            ngram += porter.stripAffixes(word) + " ";
        }
        if (ngram != ""){
            one_gram.add(ngram.trim());
        }
        // 2-gram
        ngram = "";
        if (i < words.size()-1){
            for (int j=0; j<2; j++) {
                String word = words.get(i+j).toLowerCase();
                if (stopWords.contains(word)) {
                    ngram = "";
                    break;
                }
                ngram += porter.stripAffixes(word) + " ";
            }
            if (ngram != ""){
                two_gram.add(ngram.trim());
            }
        }
        // 3-gram
        ngram = "";
        if (i < words.size()-2){
            for (int j=0; j<3; j++) {
                String word = words.get(i+j).toLowerCase();
                if (stopWords.contains(word)) {
                    ngram = "";
                    break;
                }
                ngram += porter.stripAffixes(word) + " ";
            }
            if (ngram != ""){
                three_gram.add(ngram.trim());
            }
        }
    };

    // create a list of all the n-grams
    List<String> ngrams = new ArrayList<String>();
    ngrams.addAll(one_gram);
    ngrams.addAll(two_gram);
    ngrams.addAll(three_gram);


    //handle database here
    String dbPath = getServletContext().getRealPath("/WEB-INF/database/Database");

    RecordManager recman = RecordManagerFactory.createRecordManager(dbPath);


    long invertedindexid = recman.getNamedObject("invertedindex");
    HTree invertedindex = HTree.load(recman, invertedindexid);

    long forwardindexid = recman.getNamedObject("forwardindex");
    HTree forwardindex = HTree.load(recman, forwardindexid);

    long titleInvertedindexid = recman.getNamedObject("titleInvertedindex");
    HTree titleInvertedindex = HTree.load(recman, titleInvertedindexid);

    long titleForwardindexid = recman.getNamedObject("titleForwardindex");
    HTree titleForwardindex = HTree.load(recman, titleForwardindexid);

    long urlToIdid = recman.getNamedObject("urlToId");
    HTree urlToId = HTree.load(recman, urlToIdid);

    long idToUrlid = recman.getNamedObject("idToUrl");
    HTree idToUrl = HTree.load(recman, idToUrlid);

    long wordToIdid = recman.getNamedObject("wordToId");
    HTree wordToId = HTree.load(recman, wordToIdid);

    long idToWordid = recman.getNamedObject("idToWord");
    HTree idToWord = HTree.load(recman, idToWordid);

    long bigramid = recman.getNamedObject("bigram");
    HTree bigram = HTree.load(recman, bigramid);

    long trigramid = recman.getNamedObject("trigram");
    HTree trigram = HTree.load(recman, trigramid);

    long metadataid = recman.getNamedObject("metadata");
    HTree metadata = HTree.load(recman, metadataid);

    

    //Posting posting = new Posting(1,1);
    //out.println(posting);
    //out.println(invertedindex);
    //out.println(invertedindex.keys());

    SearchEngine se = new SearchEngine(
    new Porter(), 
    stopWords,
    urlToId,
    wordToId,
    idToWord,
    titleForwardindex,
    forwardindex,
    titleInvertedindex,
    invertedindex,
    bigram,
    trigram,
    recman,
    idToWordid
    );

    Vector<Vector<Object>> result = se.query(input);
    StringBuilder sb = new StringBuilder();
    sb.append("{\"results\":[");
    for (int i = 0; i < result.size() && i < 50; i++) {
        Object docId = result.get(i).get(0);
        String url = String.valueOf(idToUrl.get(result.get(i).get(0))); 
        sb.append("{");
        sb.append("\"url\":");
        sb.append("\"" +String.valueOf(idToUrl.get(result.get(i).get(0)) + "\","));
        sb.append("\"score\":");
        sb.append(result.get(i).get(1));
        sb.append(",");
        Container data = (Container) metadata.get(url);
        Vector<String> childLinks = data.childLinks;
        int size = data.pageSize;
        long lastModified = data.lastModificationDate;
        Vector<String> title = data.title;        
        Vector<Posting> wordFrequencies = (Vector<Posting>) forwardindex.get(docId);
        sb.append("\"size\":" + "\"" + String.valueOf(size) + "\"" + ",");
        sb.append("\"lastModified\":" + "\"" + String.valueOf(lastModified) + "\"" + ",");
        String titleString = "";
        for (String s : title) {
            titleString += s;
        }
        sb.append("\"title\":" + "\"" + titleString + "\"" + ",");
        sb.append("\"childLinks\":[");
        for (int j = 0; j < childLinks.size(); j++) {
            sb.append("\"" + childLinks.get(j) + "\"");
            if (j != childLinks.size() - 1) {
                sb.append(",");
            }
        }
        sb.append("],");
        sb.append("\"wordFrequencies\":[");
        for (Posting wordFrequency : wordFrequencies) {
            sb.append("{");
            sb.append("\"word\":");
            sb.append("\"" + idToWord.get(wordFrequency.id) + "\"");
            sb.append(",");
            sb.append("\"frequency\":");
            sb.append(wordFrequency.freq);
            sb.append("},");

        }
        sb.deleteCharAt(sb.length()-1);
        sb.append("]");
        sb.append("}");
        if (i != result.size() - 1) {
            sb.append(",");
        }
    }
    sb.append("]}");
    //response.setContentType("application/json");
    response.setCharacterEncoding("UTF-8");
    response.setContentType("text/html;charset=UTF-8");
    //out.println(sb.toString());
    response.getWriter().write(sb.toString());

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
